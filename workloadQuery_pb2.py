# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: workloadQuery.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='workloadQuery.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x13workloadQuery.proto\"\xdb\x01\n\x12RequestForWorkload\x12\r\n\x05rfwId\x18\x01 \x01(\x06\x12\x38\n\rbenchmarkType\x18\x02 \x01(\x0b\x32!.RequestForWorkload.BenchmarkType\x12\x16\n\x0eworkloadMetric\x18\x03 \x01(\t\x12\x11\n\tbatchUnit\x18\x04 \x01(\x05\x12\x0f\n\x07\x62\x61tchId\x18\x05 \x01(\x05\x12\x11\n\tbatchSize\x18\x06 \x01(\x05\x1a-\n\rBenchmarkType\x12\x0e\n\x06source\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\"F\n\x0fResponseForData\x12\r\n\x05rfwId\x18\x01 \x01(\x06\x12\x13\n\x0blastBatchId\x18\x02 \x01(\x05\x12\x0f\n\x07samples\x18\x03 \x03(\x01\x32\x46\n\rWorkloadQuery\x12\x35\n\nGetSamples\x12\x13.RequestForWorkload\x1a\x10.ResponseForData\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_REQUESTFORWORKLOAD_BENCHMARKTYPE = _descriptor.Descriptor(
  name='BenchmarkType',
  full_name='RequestForWorkload.BenchmarkType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='source', full_name='RequestForWorkload.BenchmarkType.source', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='RequestForWorkload.BenchmarkType.type', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=198,
  serialized_end=243,
)

_REQUESTFORWORKLOAD = _descriptor.Descriptor(
  name='RequestForWorkload',
  full_name='RequestForWorkload',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='rfwId', full_name='RequestForWorkload.rfwId', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='benchmarkType', full_name='RequestForWorkload.benchmarkType', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='workloadMetric', full_name='RequestForWorkload.workloadMetric', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='batchUnit', full_name='RequestForWorkload.batchUnit', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='batchId', full_name='RequestForWorkload.batchId', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='batchSize', full_name='RequestForWorkload.batchSize', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUESTFORWORKLOAD_BENCHMARKTYPE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=243,
)


_RESPONSEFORDATA = _descriptor.Descriptor(
  name='ResponseForData',
  full_name='ResponseForData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='rfwId', full_name='ResponseForData.rfwId', index=0,
      number=1, type=6, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lastBatchId', full_name='ResponseForData.lastBatchId', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='samples', full_name='ResponseForData.samples', index=2,
      number=3, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=245,
  serialized_end=315,
)

_REQUESTFORWORKLOAD_BENCHMARKTYPE.containing_type = _REQUESTFORWORKLOAD
_REQUESTFORWORKLOAD.fields_by_name['benchmarkType'].message_type = _REQUESTFORWORKLOAD_BENCHMARKTYPE
DESCRIPTOR.message_types_by_name['RequestForWorkload'] = _REQUESTFORWORKLOAD
DESCRIPTOR.message_types_by_name['ResponseForData'] = _RESPONSEFORDATA

RequestForWorkload = _reflection.GeneratedProtocolMessageType('RequestForWorkload', (_message.Message,), dict(

  BenchmarkType = _reflection.GeneratedProtocolMessageType('BenchmarkType', (_message.Message,), dict(
    DESCRIPTOR = _REQUESTFORWORKLOAD_BENCHMARKTYPE,
    __module__ = 'workloadQuery_pb2'
    # @@protoc_insertion_point(class_scope:RequestForWorkload.BenchmarkType)
    ))
  ,
  DESCRIPTOR = _REQUESTFORWORKLOAD,
  __module__ = 'workloadQuery_pb2'
  # @@protoc_insertion_point(class_scope:RequestForWorkload)
  ))
_sym_db.RegisterMessage(RequestForWorkload)
_sym_db.RegisterMessage(RequestForWorkload.BenchmarkType)

ResponseForData = _reflection.GeneratedProtocolMessageType('ResponseForData', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSEFORDATA,
  __module__ = 'workloadQuery_pb2'
  # @@protoc_insertion_point(class_scope:ResponseForData)
  ))
_sym_db.RegisterMessage(ResponseForData)


# @@protoc_insertion_point(module_scope)
